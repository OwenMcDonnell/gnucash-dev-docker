version: 1.0.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - /^master/
skip_tags: true
max_jobs: 1 # build cache usage depends on sequential non-parallel jobs
image: Ubuntu1804
clone_depth: 1
shallow_clone: true
environment:
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  DOCKERHUBUSER: diablodale
  DOCKERHUBREPO: gnucashbuilder
  matrix:
    #- OS_DISTTAG: ubuntu-14.04
    #- OS_DISTTAG: ubuntu-16.04
    #- OS_DISTTAG: ubuntu-18.04
    #- OS_DISTTAG: ubuntu-19.04
    #- OS_DISTTAG: debian-8
    #- OS_DISTTAG: debian-9
    #- OS_DISTTAG: debian-10
    - OS_DISTTAG: archlinux
    #- OS_DISTTAG: centos-7
    #- OS_DISTTAG: opensuse-15.0
    #- OS_DISTTAG: opensuse-15.1
    #- OS_DISTTAG: fedora-28
    #- OS_DISTTAG: fedora-29
    - OS_DISTTAG: fedora-30

# cache is restored after init script, after project repo clone, before install script
install:
- sh: |
    #!/bin/bash
    # This script is needed for when these CI files are in a separate repo than the core GnuCash repo
    set -e
    if [[ (-z "$GNC_GIT_CHECKOUT") || (-z "$APPVEYOR_BUILD_ID") ]]; then
      echo 'Error. GNC_GIT_CHECKOUT and APPVEYOR_BUILD_ID env variables are not all defined' >&2
      echo "       GNC_GIT_CHECKOUT=${GNC_GIT_CHECKOUT}" >&2
      echo "       APPVEYOR_BUILD_ID=${APPVEYOR_BUILD_ID}" >&2
      exit 1
    fi
    # workaround for appveyor bugs in REST APIs, yml 'for:' construct, and lack of build cache across jobs
    curl --silent --fail --location --retry 3 --connect-timeout 5 --header 'Content-Type: application/json' "https://ci.appveyor.com/api/projects/${APPVEYOR_ACCOUNT_NAME}/${APPVEYOR_PROJECT_SLUG}/build/${APPVEYOR_BUILD_VERSION}" > gncbuild.json
    if [[ ("$?" != '0') || ! -s gncbuild.json ]]; then
      echo 'Error retrieving GnuCash build json from AppVeyor' >&2
      exit 1
    fi
    COMMITHASH=$(egrep -o 'GnCsHa[^"]+' gncbuild.json | cut -c 7-)
    if [[ -z "$COMMITHASH" ]]; then
      curl --silent --fail --location --retry 3 --connect-timeout 5 "https://api.github.com/repos/gnucash/gnucash/commits/${GNC_GIT_CHECKOUT}" > gnccommit.json
      if [[ ("$?" != "0") || ! -s gnccommit.json ]]; then
        echo "Error retrieving GnuCash git commit from GitHub with GNC_GIT_CHECKOUT=${GNC_GIT_CHECKOUT}" >&2
        exit 1
      fi
      sudo apt-get -qq update
      sudo DEBIAN_FRONTEND=noninteractive apt-get -yqq install jq
      OBJECTHASH="$(jq --raw-output '.sha' < gnccommit.json)"
      if [[ -z "$OBJECTHASH" ]]; then
        echo 'Error. Unable to parse GitHub commit json for sha hash' >&2
        exit 1
      fi
      COMMITHASH="$OBJECTHASH"
      jq '{
          "committed":.commit.committer.date,
          "committerName":.commit.committer.name,
          "committerEmail":.commit.committer.email,
          "authorName":.commit.author.name,
          "authorEmail":.commit.author.email,
          "message":"Commit \(.sha[0:7]): \(.commit.message)\nGnCsHa\(.sha)"
          }' < gnccommit.json > buildjob.json
      if [[ ! -s buildjob.json ]]; then
        echo 'Error. Unable to parse GitHub commit json for commit details' >&2
        exit 1
      fi
      curl --retry 3 --silent --show-error --fail --output /dev/null --request PUT --header 'Content-Type: application/json' --data "@buildjob.json" "${APPVEYOR_API_URL}api/build"
      curl --retry 3 --silent --show-error --fail --output /dev/null --request POST --header 'Content-Type: application/json' --data "{\"category\":\"information\", \"message\":\"GnuCash commit ${COMMITHASH} locked for all jobs across this build\"}" "${APPVEYOR_API_URL}api/build/messages"
      echo "GnuCash commit ${COMMITHASH} locked for all jobs across this build"
    else
      echo "GnuCash commit ${COMMITHASH} retrieved lock for all jobs across this build"
    fi
    echo "export COMMITHASH='${COMMITHASH}'" > gnucash.commithash

build_script:
- sh: |
    #!/bin/bash
    set -e
    . ./gnucash.commithash
    if [[ (-z "$DOCKERHUBUSER") || (-z "$DOCKERHUBREPO") || (-z "$OS_DISTTAG") || (-z "$COMMITHASH") ]]; then
      echo 'Error. DOCKERHUBUSER, DOCKERHUBREPO, OS_DISTTAG, and COMMITHASH env variables are not all defined' >&2
      echo "       DOCKERHUBUSER=${DOCKERHUBUSER}" >&2
      echo "       DOCKERHUBREPO=${DOCKERHUBREPO}" >&2
      echo "       OS_DISTTAG=${OS_DISTTAG}" >&2
      exit 1
    fi
    if [[ -n "$DOCKERHUBUSER" && -n "$DOCKERHUBPW" ]]; then
      docker login --username "$DOCKERHUBUSER" \
                   --password-stdin <<< "$DOCKERHUBPW"
    fi
    docker pull "${DOCKERHUBUSER}/${DOCKERHUBREPO}:${OS_DISTTAG}"
    docker tag "${DOCKERHUBUSER}/${DOCKERHUBREPO}:${OS_DISTTAG}" "gnucashbuilder:${OS_DISTTAG}"
    docker build --file commontester.dockerfile \
                 --force-rm \
                 --tag gnucashtester:${OS_DISTTAG} \
                 --build-arg OS_DISTTAG=${OS_DISTTAG} \
                 --build-arg GNC_PHASES=build,install \
                 --build-arg GNC_GIT_CHECKOUT=${COMMITHASH} \
                 .

test_script:
- sh: |
    #!/bin/bash
    set -e
    docker run --init \
               --tty \
               --env GNC_PHASES=test \
               --env GNC_EXIT_WITH_RESULT=1 \
               --name gnucashtester-${OS_DISTTAG} \
               gnucashtester:${OS_DISTTAG}
    docker cp gnucashtester-${OS_DISTTAG}:/build/Testing ./
    curl --retry 3 -F 'file=@./Testing/Temporary/jUnitResults.xml' "https://ci.appveyor.com/api/testresults/junit/${APPVEYOR_JOB_ID}"

artifacts:
- path: Testing/2*/Test.xml
  name: ctest raw xml
- path: Testing/Temporary/CTestCostData.txt
  name: CTestCostData.txt
- path: Testing/Temporary/LastTest*.log
  name: LastTest.log
- path: Testing/Temporary/jUnitResults.xml
  name: junit test xml
